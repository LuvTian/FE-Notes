全局安装vue3命令行工具 npm install -g @vue/cli
升级vue cli 先卸载 sudo npm uninstall -g @vue/cli 再安装sudo npm install -g @vue/cli
手动删除vue cli: sudo rm -rf /usr/local/devenv/nodejs/lib/node_modules/@vue
查看vue-cli版本 vue -V
#初始化项目（webpack是模板,可选的模板还有webpack、webpack-simple、browserify、browserify-simple、pwa、simple demo是要创建的项目文件夹） vue init webpack demo 接下来会提示一些项目配置需要进行设置 然后会初始化项目并安装所需依赖
vue create demo 创建一个项目(也可以通过vue ui 命令以图形化界面创建和管理项目)
进入项目目录cd demo
运行项目 npm run serve 或者npx vue-cli-service serve


#js里面的图片地址需要import或者require进来的才能使用

#在v-html里面放图片路径的方式：
使用网络图片
或者var src = require('../../adfasf')    `<img :src="src" />`
或者import img = '../../adfasf';
this.description=`<img src="${img}">`

#vue 项目打包时样式及背景图片路径找不到
更改 build/utils.js 文件中 ExtractTextPlugin 插件的options 配置：

if (options.extract) {
  return ExtractTextPlugin.extract({
    use: loaders,
    publicPath: '../../',         // 注意配置这一部分，根据目录结构自由调整
    fallback: 'vue-style-loader'
  })
} else {
  return ['vue-style-loader'].concat(loaders)
}

#vue在打包后如果出现页面空白，需要注意一下路由配置文件里是否开启了mode:'history',

vue生命周期
beforeCreated() 在实例创建之间执行，数据未加载状态
created() 在实例创建、数据加载后，能初始化数据，dom渲染之前执行
beforeMount() 虚拟dom已创建完成，在数据渲染前最后一次更改数据
mounted() 页面、数据渲染完成，真实dom挂载完成
beforeUpadate() 重新渲染之前触发
updated() 数据已经更改完成，dom 也重新 render 完成,更改数据会陷入死循环
beforeDestory() 和 destoryed() 前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行

使用举例：
beforecreate : 举个栗子：可以在这加个loading事件 
created ：在这结束loading，还做一些初始化，实现函数自执行 
mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情，在这里才能通过document.getElementById来获取到页面元素，比如获取canvas对象
beforeDestory： 你确认删除XX吗？ destoryed ：当前组件已被删除，清空相关内容

正常生命周期执行顺序：
beforeCreate
created
beforeMount
mounted

父子组件生命周期执行顺序：
父组件beforeCreated ->父组件created ->父组件beforeMounted ->子组件beforeCreated ->子组件created ->子组件beforeMounted ->子组件mounted -> 父组件mounted。
一定要记住父组件的mounted在最后

继承关系组件的生命周期：交替执行
被继承组件beforeMount-继承组件beforeMount->被继承组件created->继承组件created->被继承组件beforeMount->继承组件beforeMount->被继承组件mounted->继承组件mounted


vuex和localStorage/sessionStorage的区别
http://www.cnblogs.com/DZzzz/p/9201583.html

### 侦听器watch和计算属性computed的区别
watch使监听一个变量，这个变量可以是数组，用于异步场景
computed可以监听多个变量，这个变量是在vue实例里面，用于数据联动


###vue cli eslint 修改为4个空格
.editorconfig文件  修改indent_size = 4
.eslintrc.js文件 rules添加'indent': ['error', 4]


在vue里不能直接使用console.log要加上window.console.log()

当要动态更新data里面的对象数据时候要用this.$set(Object,'object的键','修改的值'),给对象新增属性也是可以的

后端配置histosy模式
https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90