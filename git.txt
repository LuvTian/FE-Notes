git ssh免密
$ ssh-keygen -t rsa 或者直接ssh-kengen(生成的秘钥文件位置是在当前目录，生成之前要切换到.ssh目录下操作或者Enter file in which to save the key (/Users/rehack/.ssh/id_rsa):的时候填写完整的.ssh路径 或者生成后拷贝到.ssh目录下)
Enter file in which to save the key (/Users/rehack/.ssh/id_rsa):xxx 这里需要给生成的秘钥文件取个名字，默认就是id_rsa,如果这里自定义了，在后面ssh -T git@github.com的时候就会报错Permission denied (publickey)
解决这个报错有两种方式：1.使用默认的id_rsa; 2.ssh-add ~/.ssh/自定义的秘钥文件名
ssh-add -l 查看加入的密钥列表
ssh -v git@github.com 查看调试信息 或者ssh -vvv git@github.com

如果ssh -T git@github.com测试通过，但是git clone的时候有如下报错，还是因为没有给git服务器里加入你的密钥到信任列表，执行ssh-add ~/.ssh/id_rsa即可
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.


使用https协议进行git操作的时候需要输密码的解决方案：
git config credential.helper store 或者git config --global credential.helper store
=================================================================================
安装notepad++或者其他代码编辑器，然后打开E:\Program Files\cmder\config目录下的aliases文件，在最后面添加以下代码：
l=ls --show-control-chars
la=ls -aF --show-control-chars
ll=ls -alF --show-control-chars
ls=ls --show-control-chars -F

字体Consolas

log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit


系统变量：
path %SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;D:\开发工具\EmEditor;D:\;odeJS\
・・
如果path变量之前有内容，则需要在末尾添加一个分号，然后加入内容“c:\windows\system32”

git用户变量
HOME %USERPROFILE% 免push密码
git config --global user.name "Your Name" 配置用户name
git config --global user.email "you@example.com" 配置用户邮箱

mkdir 文件夹名称 创建新文件夹
git init 初始化仓库 执行此命令后会在仓库多一个.git的文件夹
git status
git add filename    git add.
git commit -m "提交日志" 提交
git push -u origin ziyao
git checkout -b 分支名称    创建分支并切换到该分支
git checkout ziyao 切换分支
git log
git merge --no-ff -m "这里是merge日志" 要合并到当前分支下的分支名称   合并
vim index.html 创建一个index.html的文件 可以在里面编辑内容 ESC键保存 shift+: 然后输入x就可以退出vim模式

关联远程仓库
git remote add origin git@github.com:codesboy/xxx.git


在执行git add之前执行git status可以查看哪些文件被修改了
git diff + 文件名 可以看该文件的修改，git diff 不加文件名 可以看所有文件的修改。


git diff commit-id-1 commit-id-2 可以对比两个commit的差别  commit-id可以通过git log命令查看到
git diff commit-id-1 commit-id-2 >> diff.txt 可以将对比结果输出到文件里

配置简写

=================================================================================
git push 报错 "error: failed to push some refs to xxx" 解决
git fetch --all
git reset --hard origin/master
Git fetch 只是下载远程的库的内容，不做任何的合并
git reset 把HEAD指向刚刚下载的最新的版本
=================================================================================
删除最近一次远程的错误commit
git reset --hard HEAD~1
git push origin HEAD --force

=================================================================================
git代理

#HTTP协议
配置代理：
git config --global http.proxy 'socks5://127.0.0.1:1080'
git config --global https.proxy 'socks5://127.0.0.1:1080'
撤销代理：
git config --global --unset http.proxy
git config --global --unset https.proxy
查看代理：
git config --global --get http.proxy
git config --global --get https.proxy
或者cat ~/.gitconfig
如果Git代理不失效的时候：
1.尝试撤销代理重新设置,http和https都要设置才行。2.尝试设置终端代理。3.尝试使用http协议代理'http://127.0.0.1:1087' 4.排查代理是否故障，端口号是否正确



#SSH协议
为个别域名设置代理
在~/.ssh/config中根据域名添加配置，比如为github、gitlab配置SSH代理
Host github.com
Hostname github.com
ProxyCommand nc -x 127.0.0.1:1086 %h %p

Host gitlab.com
Hostname gitlab.com
ProxyCommand nc -x 127.0.0.1:1086 %h %p

mac下如果要使用sudo操作git,还需要给root用户添加上面的配置:
sudo vi /var/root/.ssh/config
Host github.com
Hostname github.com
ProxyCommand nc -x 127.0.0.1:1086 %h %p



所有SSH协议都走代理
新建文件”/path/to/soks5proxyssh”，内容如下：
#!/bin/sh
ssh -o ProxyCommand="nc -x 127.0.0.1:1086 %h %p" "$@"

配置git使用该脚本：
export GIT_SSH="/path/to/soks5proxyssh"
别忘了给此脚本可执行权限哦，1080是ss客户端本地代理端口，Mac和win是不一样的

如果出现报错：ssh_exchange_identification: Connection closed by remote host. fatal: Could not read from remote repository.
检查代理是否开启且连接正常

=================================================================================
gitignore不生效问题:
匹配规则不正确
**表示匹配多级目录 如**/.DS_Store
a/**/b: 忽略a/b, a/x/b, a/x/y/b等
!表示不忽略
bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
/bin: 忽略根目录下的bin文件
/*.c: 忽略 cat.c，不忽略 build/cat.c

清理git缓存解决.
git rm -r --cached .
git add .
git commit -m 'update .gitignore'

=================================================================================
git回退到某个commit 比如某个开源项目感觉最新的一次改动有bug，可以用这个命令回到更早点的版本来排查问题
git reset --hard commit_id 
commit_id可以通过git log 查到或者到github commits列表下查，注意所在的分支
git log是查的所有的commit记录 包括时间也包括commit_id
如果只想查看最后一条commit的ID git rev-parse HEAD

##git 分支操作
=================================================================================
clone指定分支
git clone -b 分支名 远程仓库地址

=================================
拉取远程分支并创建本地分支方式一 推荐
git checkout -b 本地分支名x origin/远程分支名x
使用该方式会在本地新建分支x，并自动切换到该本地分支x。采用此种方法建立的本地分支会和远程分支建立映射关系。
=================================
拉取远程分支并创建本地分支方式二
git fetch origin 远程分支名x:本地分支名x
使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。采用此种方法建立的本地分支不会和远程分支建立映射关系。
=================================
git branch -av  查看所有分支包括本地和远程
git remote show origin  可以查看remote地址，远程分支，还有本地分支与之相对应关系等信息。

#查看远程分支
git branch -r
 
#查看本地分支
git branch
=================================
切换本地分支
git checkout -b 分支名称    创建分支并切换到该分支
git checkout ziyao 切换分支
=================================
修改本地的分支名
git branch -m oldName newName

修改远程分支名
先删除远程分支 git push origin --delete xxx 如果被删除的远程分支是出于默认分支上，比如master，要切换一下默认分支 再删除
然后重命名本地分支 git branch -m oldName newName
把本地重命名的分支推送到远程 git push origin <newBranchName> 
=================================
删除本地分支
git branch --delete xxx
=================================
本次创建一个独立的空白分支
git checkout --orphan xxx 
然后删除里面的内容 git rm -rf .
这个时候你用git branch命令是看不见当前分支的名字的，除非你进行了第一次commit。

=================================
出现下面的这个报错可能是因为被墙，需要开代理
ssh_exchange_identification: Connection closed by remote host
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

=================================
git config --global --list --show-origin  #查看所有的配置以及它们所在的文件

=================================
新版git 要加一个配置git config --global pull.ff only 才能git pull