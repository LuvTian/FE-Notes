git ssh免密
$ ssh-keygen -t rsa 或者直接ssh-kengen(生成的秘钥文件位置是在当前目录，生成之前要切换到.ssh目录下操作或者Enter file in which to save the key (/Users/rehack/.ssh/id_rsa):的时候填写完整的.ssh路径 或者生成后拷贝到.ssh目录下)
Enter file in which to save the key (/Users/rehack/.ssh/id_rsa):xxx 这里需要给生成的秘钥文件取个名字，默认就是id_rsa,如果这里自定义了，在后面ssh -T git@github.com的时候就会报错Permission denied (publickey)
解决这个报错有两种方式：1.使用默认的id_rsa; 2.ssh-add ~/.ssh/自定义的秘钥文件名
ssh-add -l 查看加入的密钥列表
ssh -v git@github.com 查看调试信息 或者ssh -vvv git@github.com
=================================================================================
安装notepad++或者其他代码编辑器，然后打开E:\Program Files\cmder\config目录下的aliases文件，在最后面添加以下代码：
l=ls --show-control-chars
la=ls -aF --show-control-chars
ll=ls -alF --show-control-chars
ls=ls --show-control-chars -F

字体Consolas

log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit


系统变量：
path %SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;D:\开发工具\EmEditor;D:\;odeJS\
・・
如果path变量之前有内容，则需要在末尾添加一个分号，然后加入内容“c:\windows\system32”

git用户变量
HOME %USERPROFILE% 免push密码
git config --global user.name "Your Name" 配置用户name
git config --global user.email "you@example.com" 配置用户邮箱

mkdir 文件夹名称 创建新文件夹
git init 初始化仓库 执行此命令后会在仓库多一个.git的文件夹
git status
git add filename    git add.
git commit -m "提交日志" 提交
git push -u origin ziyao
git checkout -b 分支名称    创建分支并切换到该分支
git checkout ziyao 切换分支
git log
git merge --no-ff -m "这里是merge日志" 要合并到当前分支下的分支名称   合并
vim index.html 创建一个index.html的文件 可以在里面编辑内容 ESC键保存 shift+: 然后输入x就可以退出vim模式



在执行git add之前执行git status可以查看哪些文件被修改了
git diff + 文件名 可以看该文件的修改，git diff 不加文件名 可以看所有文件的修改。


git diff commit-id-1 commit-id-2 可以对比两个commit的差别  commit-id可以通过git log命令查看到
git diff commit-id-1 commit-id-2 >> diff.txt 可以将对比结果输出到文件里

配置简写

=================================================================================
git push 报错 "error: failed to push some refs to xxx" 解决
git fetch --all
git reset --hard origin/master
Git fetch 只是下载远程的库的内容，不做任何的合并
git reset 把HEAD指向刚刚下载的最新的版本
=================================================================================
删除最近一次远程的错误commit
git reset --hard HEAD~1
git push origin HEAD --force



